<resources xmlns:tools="http://schemas.android.com/tools">
    <string name="app_name" translatable="false">Grapher for android</string>

    <string name="menu_grapher">Grapher by Math_way</string>
    <string name="nav_help">Help</string>
    <string name="nav_settings">Settings</string>
    <string name="nav_resize">Resize</string>
    <string name="nav_timer">Timer</string>
    <string name="graphics">Graphics</string>
    <string name="functions">Functions</string>
    <string name="calculator">Calculator</string>
    <string name="update">Update</string>
    <string name="plus" translatable="false">+</string>
    <string name="converting">Converting..</string>
    <string name="updater_errors_two_funcs">We need 2 funcs in parametric and translation.</string>
    <string name="updater_errors_params">We need t or x and y vars in %d graphic</string>
    <string name="saved">saved</string>
    <string name="loaded">loaded</string>
    <string name="updater_errors_recursion">Too long \'goto\' recursion: len</string>
    <string name="updating">Updating..</string>
    <string name="parser_errors_0">Undefined symbol \'%s\'</string>
    <string name="parser_errors_1">%s in %s</string>
    <string name="parser_errors_2">Too little arguments</string>
    <string name="parser_errors_3">Too many arguments</string>
    <string name="parser_errors_4">Bad location of %s</string>
    <string name="parser_errors_5">brackets</string>
    <string name="parser_errors_6">Only vars and lambdas can be in $..$: \'%s\'</string>
    <string name="calculator_errors_0" formatted="true">%s in \'%s\' %s</string>
    <string name="calculator_errors_1" formatted="true">%s in calculator</string>
    <string name="calculator_errors_2" formatted="true">%s in grammar of \'%s\' %s</string>
    <string name="calculator_errors_3">graphic</string>
    <string name="calculator_errors_4">function</string>
    <string name="calculator_errors_5">Too many vars</string>
    <string name="calculator_errors_6">constant</string>
    <string name="timer_dur_fps">Seconds : FPS,</string>
    <string name="dimension">Dimension from : to</string>
    <string name="timer_boomerang_off">Jump</string>
    <string name="timer_boomerang_on">Boomerang</string>
    <string name="simple_error">Couldn\'t understand input</string>
    <string name="clear">Clear</string>
    <string name="rollback">Rollback</string>
    <string name="net_width">Net width</string>
    <string name="load">Load project</string>
    <string name="save">Save project</string>
    <string name="quick_save">Quick save</string>
    <string name="minus" translatable="false">←</string>
    <string name="discretization">Discretization</string>
    <string name="set_color">Set Color</string>
    <string name="update_on_ask">Update on ask</string>
    <string name="feels_time">Feels time</string>
    <string name="function">Function</string>
    <string name="parametric">Parametric</string>
    <string name="implicit">Implicit</string>
    <string name="translation">Translation</string>
    <string name="sensitivity">Sensitivity</string>
    <string name="save_picture">Save picture</string>
    <string name="infrared_imager">Infrared imager</string>
    <string name="rainbow">Rainbow</string>
    <string name="lines_per_cell">Lines per cell</string>
    <string name="using_help">Using help</string>
    <string name="calculator_help">Calculator help</string>
    <string name="extra_info">Extra info</string>
    <string name="version_log">Version log</string>
    <string name="permission_internet">Log takes place on github..\nlet load it</string>
    <string name="loading_log">Loading log..</string>
    <string-array name="helpers">
        <item>help 11</item>
        <item>Make a graphic</item>
        <item>Click \"+\" and write function in the text field.\nThen press ENTER.\n</item>
        <item>Timer:</item>
        <item>Write a graphic using time var \'tm\', then click \'Timer\' and click \'Begin\' in the shown panel.\nYou can change some settings in this panel.\nYou can also do right click on button \'Timer\' to stop or start it.\n</item>
        <item>Resize:</item>
        <item>\'Right\' click will change ordinate\'s scale to abscissa\'s scale.\n\'Left\' click on the button will change the action:\nAbscissa/Ordinate - mouse wheel rotation / touchPad gestures will change only abscissa\'s/ordinate\'s scale.\n</item>
        <item>Extra:</item>
        <item>\'Right\' click on \'-\' button in expression in graphics. Extra info panel will be shown.\n</item>
        <item>Parametric:</item>
        <item>Using var t write an expression for x, then put \':\' and then write an expression for y, click ENTER.\n</item>
        <item>Implicit:</item>
        <item>Equality:\nGrapher will show, where the expression is true (sensitivity is maximum difference between two neighboring pixels close to 0)\nf(x,y)=g(x,y)\nInequality:\nWrite an inequality using x, y and grapher will show color, where this expression is true.\nf(x,y)&lt;g(x,y)\nSpectrum:\nWrite a function like z(x, y) and grapher will show color which depends on expression value from blue to red like in infrared imager, or from red to purple like in rainbow.\nUse sensitivity to control rainbow thickness.\nz(x,y)\n</item>
        <item>Translation:</item>
        <item>Translation is moving dot, write expressions for x and y, in relation to original coordinates of dot, divide them by \":\", this is like parametric but use x and y instead of t.\n</item>
        <item>Recursion:</item>
        <item>You can use recursion, but be careful: long recursion can produce stack over flow errors.\n</item>
        <item>Lambdas:</item>
        <item>Instead of parameter in function write an expression for any variable in \'{..}\', like \'{x^2}\', if you use external vars or lambdas here, write them in \'$..$\' before brackets, like \'$x${x^y}\'.\nThen in function use \'f\' + \'some letter\', like function, for example \'fa(x)\', you can send this function in other, like \'func(fa, 4)\' - without brackets.\n</item>
        <item>Examples:</item>
        <item>f(x)=if(x&lt;1,1,x*f(x-1)) - factorial\n2sin(t):cos(t) - draws ellipse\ncos(t)*sin(tm*t):sin(t)*sin(tm*t) - polar r(a)=sin(tm*a)\ncos(x) + cos(y) - pretty picture\nin functions:\nderiv = (fa(x+d)-fa(x))/d\nd = 0.000001 - derivate of function, use like deriv({t^2}, x)\n</item>
        <item>Settings:</item>
        <item>Changing language in settings.\nSave/load grapher project here.\nNet width is minimum distance between lines of net on view.\nPut \'-\' before number and grapher won\'t show coordinates.\nGraphics max count - number of visible functions of graphics.\n</item>
        <item>help 7</item>
        <item>How to use?</item>
        <item>Enter an example in calculator field and press Enter. Do \'right\' click on calculator field to compress Grapher frame.\nIf you want, you also can add your own functions and constants, you can write them in \'Functions\' area, separate each one by pressing ENTER.\n</item>
        <item>Your constants:</item>
        <item>On functions area write name + \"=\" + write an example. You can override internal functions and constants.\nConstants are calculating in order they are written.\n</item>
        <item>How to write your own functions?</item>
        <item>Write the name + \"=\" + expression. You can call vars by these names: x; y; z; t; x + some letter, like x龙.\nLines which doesn\'t contain \'=\' are commentaries.\n</item>
        <item>Signs:</item>
        <item>+, -, *, / standard math signs\n^ - power\n% - remainder of division\n&lt;, >, = return 1 if the expression is true else return 0\n</item>
        <item>Functions:</item>
        <item>sqrt, cbrt - quadratic and cubic roots\npow - power\nexp - exponent (it works faster than \'e^x\')\nsign - signum of number (1, 0, -1)\nlg, ln, ld, log - logarithms\nsigm - sigmoid - sigm(x) = 1 / (1 + e^-x)\nhypot - hypotenuse - sqrt(x^2 + y^2)\nsin, cos, tg, ctg, arcsin, arccos, arctg, arcctg, arctgTwo, sh, ch, th, cth - trigonometric functions, put \'d\' after them to convert radians to degrees.\nabs - absolute value\nfloor - max integer less then given\nceil - min integer bigger then given\nround - rounding according to mathematical rules\nrandom() - random value from 0 to 1\nmin, max - min / max number from few given\narr(idx, a...) - returns element from given array \'a\', returns length of array, if idx = -1\nif(x, y, z) - returns z if x = 0 else y\nifs(x) - returns 0 if x = 0 else 1\narrays: the map of arrays of values\nset(x, y, val) - sets value in array \'x\' on \'y\' position, returns this val\nget(x, y) - returns value in array \'x\' on \'y\' position\nfor(start, end, func) - executes \'func\' - lambda, gives func the integer index from [start to end), returns sum of returns of func.\nassert(x) - makes error with parameter x\n</item>
        <item>Constants: (SI)</item>
        <item>pi - pi value = 3.14\ne - exponent = 2.71\nG - gravitational constant = 6.67 * 10 ^ -11\nh - Plank constant = 6.63 * 10 ^ -34\nc - speed of light = 3 * 10 ^ 8\neps - permittivity = 8.85 * 10 ^ -12\nNA - Avogadro number = 6.02 * 10 ^ 23\nR - Gas constant = 8.31\nk - Boltzmann constant = 1.38 * 10 ^ -23\nEARTH - mass of Earth = 6 * 10 ^ 24\nSUN - mass of sun = 2 * 10 ^ 30\nPROTON - mass of proton = 1.67 * 10 ^ -27\nELCT - mass of electron = 9.1 * 10 ^ -31\neCHARGE - elementary charge = 1.6 * 10 ^ -19\nau - astronomical unit = 1.5 * 10 ^ 11\npc - parsec = 3.1 * 10 ^ 16\n</item>
        <item>Examples:</item>
        <item>sqrt(4) == 2\npow(2, 4) == 16\nln(e) == 1\nlog(8, 2) == 3\narcsind(1) == 90\narctgTwo(1, 0) == pi / 2\nnum = sqrt(5) - num is a constant\nlb = ld(x) - the same as ld(x) = logarithm of x with basis 2\nmyfunc = sin(x) + cos(y) - use it like myfunc(x,y)\n</item>
        <item>help 6</item>
        <item>Warning:</item>
        <item>Grapher can answer the incomprehensible when for it questions are incorrect, for example, if you write f(x)=rx, r=2 Grapher would answer:\nToo many arguments!\nr is a function, so if there something is following continuously, grapher think it is an argument (sinx), and r doesn\'t have arguments. xr all is a variable, xra (ra=2) is working good.\n</item>
        <item>Feels time:</item>
        <item>If \"feels time\" is turned off, timer won\'t update this graphic, grapher would work faster with hard animations.\nIf you want to update this graphic rarely, use \'update_graphic(idx)\' function (in some constant) and grapher will update this graphic on timer iteration after call of this function.\n</item>
        <item>Parameters:</item>
        <item>If you create constant with a name \"lookX\" or \"lookY\", Grapher will move camera to this position, dot (lookX; lookY) will come to the middle of screen.\nCreate constants \"scaleX\" or \"scaleY\" to change approximation, scaleX/scaleY mean, than there are scaleX/scaleY pixels in a unit in screen.\nYou can also use this constants in your formulas without defining.\nIf you are using recursive constants, for save value to next timer iteration, before definition constants would be 0.\nUse parameter \'goto\' to change next calculating constant (constants numbers start with 0), setting goto means next constant will be on \'goto\' position, goto calculates on \'goto\' position (\'goto = goto\' - infinity recursion).\nUse function \'finish\' in \'goto = finish\' to finish current iteration, \'finish\' returns number of calculating constants.\nUse parameter \'gotoLen\' to change max count of using \'goto\' per one update or timer cycle. (protection from infinity recursion)\nview_movable - if 0, you can\'t move view by clicking mouse buttons (for better view).\nUse functions getMouseX(), getMouseY(), isMousePressed() to know about mouse. Coords don\'t update while mouse is not pressed.\n</item>
        <item>Lambda in calculator:</item>
        <item>Send lambda expression in calculator to get more than 1 answer. Lambda from -1 has to return count of answers.\nUse \'arr\' as main func, like \'{arr(x, 4, 5)}\', it returns \'4.0, 5.0\'.\n</item>
        <item>Hot keys:</item>
        <item>Ctrl + S/L - save/load project in/from last used file\nCtrl + Shift + S/L - just save/load project\nWhen you are editing code in functions area, you can use the following combinations:\nCtrl + Enter - like \'Update\' button\nCtrl + Shift + (Up/Down) - move line up or down\nShift + Del - delete line\nCtrl + (Вверх/Вниз) - narrow down/expand area\nTab - in main fields will help (not help) to finish writing function or constant name.\nCtrl + P - use this combination careful, it paints graphic on screen by mouse.\nHow does it work? - paints all lines from graphic, but it can\'t paint Implicits and letters (numbers).\nDrawing line: moving mouse to the line start, pressing, moving to the end and releasing.\nEnsure, that your app can understand this mechanics.\nGraphic left up will be on mouse position at start of this function, size of graphic will be the same as in grapher.\n</item>
        <item>Saves:</item>
        <item>All saves are in xml format in java properties.\nFile contains few parameters:\ncalculator - saved field \"Calculator\"\nfunctions - field \"Functions\"\ntimer_info - four numbers, like in timer settings: duration:fps and interval on new line\nview_params - four numbers, each on its own line: lookX, lookY, scaleX, scaleX\nlook x, y - coordinates of center of view\nscale x, y - number of pixels of display, which graphic unit contains\ngraphs_count - count of graphics - any natural number or 0\ngraphic+number - field of graphic\ngraphic_info+the same number - information of graphic:\n1) name of graphic - for example f for f(x), purport of name is to define color of graphic, there can be also hex value of color, like \'f ffff0000\' - \'name aarrggbb\'\n2) discretization (natural number > 2)\n3) feels time (true/false)\n4) type of graphic (Function/Parametric/Implicit/Translation)\nfurther depends on type of graphic\nif it is a Function, nothing,\nif it is a Parametric, interval,\nImplicit, sensitivity and on next line type of rainbow(0-rainbow,1-infrared imager)\nTranslation, count of lines in cell on graphic\nmain_settings - information of the app:\n</item>
    </string-array>
</resources>