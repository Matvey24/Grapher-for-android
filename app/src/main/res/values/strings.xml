<resources xmlns:tools="http://schemas.android.com/tools">
    <string name="app_name" translatable="false">Grapher for android</string>

    <string name="menu_grapher">Grapher by Math_way</string>
    <string name="nav_help">Help</string>
    <string name="nav_settings">Settings</string>
    <string name="nav_resize">Resize</string>
    <string name="nav_timer">Timer</string>
    <string name="graphics">Graphics</string>
    <string name="functions">Functions</string>
    <string name="calculator">Calculator</string>
    <string name="update">Update</string>
    <string name="plus" translatable="false">+</string>
    <string name="converting">Converting..</string>
    <string name="updater_errors_two_funcs">We need 2 funcs in parametric and translation.</string>
    <string name="updater_errors_params">We need t or x and y vars in %d graphic</string>
    <string name="saved">saved</string>
    <string name="loaded">loaded</string>
    <string name="updater_errors_recursion">Too long \'goto\' recursion: len</string>
    <string name="updating">Updating..</string>
    <string name="parser_errors_0">Undefined symbol \'%s\'</string>
    <string name="parser_errors_1">%s in %s</string>
    <string name="parser_errors_2">Too little arguments</string>
    <string name="parser_errors_3">Too many arguments</string>
    <string name="parser_errors_4">Bad location of %s</string>
    <string name="parser_errors_5">brackets</string>
    <string name="parser_errors_6">Only vars and lambdas can be in $..$: \'%s\'</string>
    <string name="calculator_errors_0" formatted="true">%s in \'%s\' %s</string>
    <string name="calculator_errors_1" formatted="true">%s in calculator</string>
    <string name="calculator_errors_2" formatted="true">%s in grammar of \'%s\' %s</string>
    <string name="calculator_errors_3">graphic</string>
    <string name="calculator_errors_4">function</string>
    <string name="calculator_errors_5">Too many vars</string>
    <string name="calculator_errors_6">constant</string>
    <string name="timer_dur_fps">Seconds : FPS,</string>
    <string name="dimension">Dimension from : to</string>
    <string name="timer_boomerang_off">Jump</string>
    <string name="timer_boomerang_on">Boomerang</string>
    <string name="simple_error">Couldn\'t understand input</string>
    <string name="clear">Clear</string>
    <string name="rollback">Rollback</string>
    <string name="net_width">Net width</string>
    <string name="load">Load project</string>
    <string name="save">Save project</string>
    <string name="quick_save">Quick save</string>
    <string name="minus" translatable="false">←</string>
    <string name="discretization">Discretization</string>
    <string name="set_color">Set Color</string>
    <string name="update_on_ask">Update on ask</string>
    <string name="feels_time">Feels time</string>
    <string name="function">Function</string>
    <string name="parametric">Parametric</string>
    <string name="implicit">Implicit</string>
    <string name="translation">Translation</string>
    <string name="sensitivity">Sensitivity</string>
    <string name="save_picture">Save picture</string>
    <string name="infrared_imager">Infrared imager</string>
    <string name="rainbow">Rainbow</string>
    <string name="lines_per_cell">Lines per cell</string>
    <string name="using_help">Using help</string>
    <string name="calculator_help">Calculator help</string>
    <string name="extra_info">Extra info</string>
    <string name="version_log">Version log</string>
    <string name="permission_internet">Log takes place on github..\nlet load it</string>
    <string name="loading_log">Loading log..</string>
    <string-array name="helpers">
        <item>help 11</item>
        <item>Make a graphic</item>
        <item>Click \"+\" and write function in the text field.\nThen press ENTER.\n</item>
        <item>Timer:</item>
        <item>Write a graphic using time var \'tm\',\nthan click \'Timer\' and click \'Begin\' in the shown panel.\nYou can change some settings in this panel.\nYou can also do right click on button \'Timer\'\nto stop or start it.\n</item>
        <item>Resize:</item>
        <item>\'Left\' click will change\nordinate\'s scale to abscissa\'s scale.\n\'Right\' click on the button will change the action:\nAbscissa/Ordinate - mouse wheel rotation\n/ touchPad gestures\nwill change only abscissa\'s/ordinate\'s scale.\n</item>
        <item>Extra:</item>
        <item>\'Right\' click on \'-\' button in expression in graphics.\nExtra info panel will be shown.\n</item>
        <item>Parametric:</item>
        <item>Using var t\nwrite an expression for x, then put \':\' and\nthen write an expression for y, click ENTER\n</item>
        <item>Implicit:</item>
        <item>Equality:\nGrapher will show, where the expression is true\n(sensitivity is maximum difference between\ntwo neighboring pixels close to 0)\nf(x,y)=g(x,y)\nInequality:\nWrite an inequality using x, y and grapher\nwill show color, where this expression is true.\nf(x,y)&lt;g(x,y)\nSpectrum:\nWrite a function like z(x, y) and grapher will show color\nwhich depends on expression value\nfrom blue to red like in infrared imager, or\nfrom red to purple like in rainbow.\nUse sensitivity to control rainbow thickness.\nz(x,y)\n</item>
        <item>Translation:</item>
        <item>Translation is moving dot,\nWrite expressions for x and y, in relation to\noriginal coordinates of dot, divide them by \":\",\nthis is like parametric but use x and y\ninstead of t.\n</item>
        <item>Recursion:</item>
        <item>You can use recursion, but be careful:\nlong recursion can produce stack over flow errors.\n</item>
        <item>Lambdas:</item>
        <item>Instead of parameter in function write an\nan expression for any variable in \'{..}\', like \'{x^2}\',\nif you use external vars or lambdas here,\nwrite them in \'$..$\' before brackets, like \'$x${x^y}\'.\nThen in function use \'f\' + \'some letter\', like function,\nfor example \'fa(x)\', you can send this function in other,\nlike \'func(fa, 4)\' - without brackets.\n</item>
        <item>Examples:</item>
        <item>f(x)=if(x&lt;1,1,x*f(x-1)) - factorial\n2sin(t):cos(t) - draws ellipse\ncos(t)*sin(tm*t):sin(t)*sin(tm*t) - polar r(a)=sin(tm*a)\ncos(x) + cos(y) - pretty picture\nin functions:\nderiv = (fa(x+d)-fa(x))/d\nd = 0.000001 - derivate of function, use like deriv({t^2}, x)\n</item>
        <item>Settings:</item>
        <item>Changing language in settings.\nSave/load grapher project here.\nLines &lt;-> is minimum distance\nbetween lines of net on view,\nPut \'~\' before number and\ngrapher won\'t show coordinates.\nGraphics max count - number of visible\nfunctions of graphics.\n</item>
        <item>help 7</item>
        <item>How to use?</item>
        <item>Enter an example in calculator field and press Enter.\nDo \'right\' click on calculator field to compress\nGrapher frame.\nIf you want, you also can add your\nown functions and constants,\nYou can write them in \'Functions\' area,\nseparate each one by pressing ENTER.\n</item>
        <item>Your constants:</item>
        <item>On functions area write\nname + \"=\" + write an example.\nYou can override internal functions and constants\nConstants are calculating in order they are written.\n</item>
        <item>How to write your own functions?</item>
        <item>Write the name + \"=\" + expression.\nYou can call vars by these names:\nx; y; z; t; x + some letter, like x龙.\nLines which doesn\'t contain \'=\' are commentaries.\n</item>
        <item>Signs:</item>
        <item>+, -, *, / standard math signs\n^ - power\n% - remainder of division\n&lt;, >, = return 1 if the expression\nis true else return 0\n</item>
        <item>Functions:</item>
        <item>sqrt, cbrt - quadratic and cubic roots\npow - power\nexp - exponent (it works faster than \'e^x\')\nsign - signum of number (1, 0, -1)\nlg, ln, ld, log - logarithms\nsigm - sigmoid - sigm(x) = 1 / (1 + e^-x)\nhypot - hypotenuse - sqrt(x^2 + y^2)\nsin, cos, tg, ctg,\narcsin, arccos, arctg, arcctg, arctgTwo,\nsh, ch, th, cth - trigonometric functions\nput \'d\' after them to convert radians to degrees.\nabs - absolute value\nfloor - max integer less then given\nceil - min integer bigger then given\nround - rounding according to mathematical rules\nrandom() - random value from 0 to 1\nmin, max - min / max number from few given\narr(idx, a...) - returns element from given array \'a\'\nreturns length of array, if idx = -1\nif(x, y, z) - returns z if x = 0 else y\nifs(x) - returns 0 if x = 0 else 1\narrays: the map of arrays of values\nset(x, y, val) - sets value in array \'x\' on \'y\' position,\nreturns this value\nget(x, y) - returns value in array \'x\' on \'y\' position\nfor(start, end, func) - executes \'func\' - lambda, gives\nfunc the integer index from start to end,\nreturns sum of returns of func.\nassert(x) - makes error with parameter x\n</item>
        <item>Constants: (SI)</item>
        <item>pi - pi value = 3.14\ne - exponent = 2.71\nG - gravitational constant = 6.67 * 10 ^ -11\nh - Plank constant = 6.63 * 10 ^ -34\nc - speed of light = 3 * 10 ^ 8\neps - permittivity = 8.85 * 10 ^ -12\nNA - Avogadro number = 6.02 * 10 ^ 23\nR - Gas constant = 8.31\nk - Boltzmann constant = 1.38 * 10 ^ -23\nEARTH - mass of Earth = 6 * 10 ^ 24\nSUN - mass of sun = 2 * 10 ^ 30\nPROTON - mass of proton = 1.67 * 10 ^ -27\nELCT - mass of electron = 9.1 * 10 ^ -31\neCHARGE - elementary charge = 1.6 * 10 ^ -19\nau - astronomical unit = 1.5 * 10 ^ 11\npc - parsec = 3.1 * 10 ^ 16\n</item>
        <item>Examples:</item>
        <item>sqrt(4) == 2\npow(2, 4) == 16\nln(e) == 1\nlog(8, 2) == 3\narcsind(1) == 90\narctgTwo(1, 0) == pi / 2\nnum = sqrt(5) - num is a constant\nlb = ld(x) - the same as ld(x) = logarithm of x with basis 2\nmyfunc = sin(x) + cos(y) - use it like myfunc(x,y)\n</item>
        <item>help 6</item>
        <item>Warning:</item>
        <item>Grapher can answer the incomprehensible\nwhen for it questions are incorrect, for example,\nif you write f(x)=rx, r=2\nGrapher would answer\nToo many arguments!\nr is a function, so if there something is\nfollowing continuously, grapher think\nit is an argument (sinx), and r doesn\'t\nhave arguments. xr all is a variable,\nxra (ra=2) is working good.\n</item>
        <item>Feels time:</item>
        <item>If \"feels time\" is turned off,\ntimer won\'t update this graphic,\ngrapher would work faster with hard animations.\nif you want to update this graphic rarely, use\n\'update_graphic(idx)\' function and\ngrapher will update this graphic on timer iteration\nafter call of this function.\n</item>
        <item>Parameters:</item>
        <item>If you create constant with a name \"lookX\" or \"lookY\",\nGrapher will move camera to this position,\ndot (lookX; lookY) will come to the middle of screen.\nCreate constants \"scaleX\" or \"scaleY\"\nto change approximation, scaleX/scaleY mean,\nthan there are scaleX/scaleY pixels in a unit in screen.\nYou can also use this constants in your formulas\nwithout defining.\nIf you are using recursive constants, for save value\nto next timer iteration, before definition\nconstants would be 0.\nUse parameter \'goto\' to change next\ncalculating constant (constants numbers start with 0)\nsetting goto means next constant will be on \'goto\' position,\ngoto calculates on \'goto\' position.\nUse function \'finish\' in \'goto = finish\' to\nfinish current iteration,\n\'finish\' returns number of calculating constants.\nUse parameter \'gotoLen\' to change max count of using \'goto\'\nper one update or timer cycle.\nview_movable - if 0, you can\'t move view by clicking mouse\nbuttons (for better view), but you can by moving wheel.\nUse functions getMouseX(), getMouseY(), isMousePressed()\nto know about mouse. Coords don\'t update while mouse\nis not pressed.\n</item>
        <item>Lambda in calculator:</item>
        <item>Send lambda expression in calculator to get more\nthan 1 answer. Lambda from -1 has to return count\nof answers. Use \'arr\' as main func, like \'{arr(x, 4, 5)}\'.\nreturns \'4.0, 5.0\'.\n</item>
        <item>Hot keys:</item>
        <item>Ctrl + S/L - save/load project in/from last used file\nCtrl + Shift + S/L - just save/load project\nWhen you are editing code in functions area,\nyou can use the following combinations:\nCtrl + Enter - like \'Update\' button\nCtrl + Shift + (Up/Down) - move line up or down\nShift + Del - delete line\nCtrl + (Вверх/Вниз) - narrow down/expand area\nTab - in main fields will help (not help)\nto finish writing function or constant name.\nCtrl + P - use this combination careful,\nIt paints graphic on screen by mouse.\nHow does it work? - paints all lines from\ngraphic, but it can\'t paint Implicits and letters (numbers).\nDrawing line: moving mouse to the line start,\npressing, moving to the end and releasing.\nEnsure, that your app can understand this mechanics.\nGraphic left up will be on mouse position\nat start of this function, size of graphic will be\nthe same as in grapher.\n</item>
        <item>Saves:</item>
        <item>All saves are in xml format in java properties.\nFile contains few parameters:\ncalculator - saved field \"Calculator\"\nfunctions - field \"Functions\"\nresize_idx - way to resize - number in range 0-3\ntimer_info - four numbers, like in timer settings:\nduration:fps and interval on new line\nview_params - four numbers, each on its own line:\nlookX, lookY, scale x, scale y\nlook x, y - coordinates of center of view\nscale x, y - number of pixels of display,\nwhich graphic unit contains\ngraphs_count - count of graphics -\nany natural number or 0\ngraphic+number - field of graphic\ngraphic_info+the same number - information of graphic:\n1) name of graphic - for example f for f(x),\npurport of name is to define color of graphic\nthere can be also hex value of color,\nlike \'f ffff0000\' - \'name aarrggbb\'\n2) discretization (natural number > 2)\n3) feels time (true/false)\n4) type of graphic\n(Function/Parametric/Implicit/Translation)\nfurther depends on type of graphic\nif it is a Function, nothing,\nif it is a Parametric, interval,\nImplicit, sensitivity and on next line\ntype of rainbow(0-rainbow,1-infrared imager)\nTranslation, count of lines in cell on graphic\nmain_settings - information of the app:\nfirst line - lines_space\nsecond line - language, for example, \'Русский\'.\n</item>
    </string-array>
</resources>